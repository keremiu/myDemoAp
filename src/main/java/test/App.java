/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test;


import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;



public class App {
    public String getGreeting() {
        return "Hello world.";
    }
    public static int SubArrSummation(ArrayList<Integer> array, int start,int end) {
       // System.out.println("inside search");
       int sum = 0;
        if ((array == null) || (start>end) || (array.size()<end) || (start==end)) return -1;
  
        for (int i=start;i<end;i++) {
          sum+=array.get(i);
        }
        return sum;
      }
      
      public static void main(String[] args) {
        Logger logger = LogManager.getLogger(App.class);
        int port = 4567;//Integer.parseInt(System.getenv("PORT")); hata verdiği için direk port değerini döndürdüm.
        port(port);
        logger.error("Current port number:" + port);


        port(getHerokuAssignedPort());

        get("/", (req, res) -> "Hello, World");

        post("/compute", (req, res) -> {
          String input1 = req.queryParams("input1");
          java.util.Scanner sc1 = new java.util.Scanner(input1);
          sc1.useDelimiter("[;\r\n]+");
          java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
          while (sc1.hasNext())
          {
            int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
            inputList.add(value);
          }
          sc1.close();
          System.out.println(inputList);

          
          String input2 = req.queryParams("input2");
          java.util.Scanner sc2 = new java.util.Scanner(input2);
          sc2.useDelimiter("[;\r\n]+");
          int input2AsInt = sc2.nextInt();
          int input3AsInt = sc2.nextInt();

          int result = SubArrSummation(inputList, input2AsInt,input3AsInt);

          Map<String, Integer> map = new HashMap<String, Integer>();
          map.put("result", result);
          return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());


        get("/compute",
            (rq, rs) -> {
              Map<String, String> map = new HashMap<String, String>();
              map.put("result", "not computed yet!");
              return new ModelAndView(map, "compute.mustache");
            },
            new MustacheTemplateEngine());
    }

    static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }



}
